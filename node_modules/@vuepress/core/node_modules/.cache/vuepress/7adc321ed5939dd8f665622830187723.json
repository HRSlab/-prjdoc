{"remainingRequest":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/hrslab/Documents/GitHub/prjdoc/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/hrslab/Documents/GitHub/prjdoc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/hrslab/Documents/GitHub/prjdoc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/hrslab/Documents/GitHub/prjdoc/docs/proposal.md?vue&type=template&id=69581f96&","dependencies":[{"path":"/Users/hrslab/Documents/GitHub/prjdoc/docs/proposal.md","mtime":1608543084970},{"path":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/cache-loader/dist/cjs.js","mtime":1604845479153},{"path":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1604845538099},{"path":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/cache-loader/dist/cjs.js","mtime":1604845479153},{"path":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/vue-loader/lib/index.js","mtime":1604845538098},{"path":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/@vuepress/markdown-loader/index.js","mtime":1604845478271}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}