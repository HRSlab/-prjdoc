{"remainingRequest":"/Users/imac/Documents/GitHub/@prjdoc/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/imac/Documents/GitHub/@prjdoc/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/imac/Documents/GitHub/@prjdoc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/imac/Documents/GitHub/@prjdoc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/imac/Documents/GitHub/@prjdoc/docs/termandcond.md?vue&type=template&id=ce7b93d2&","dependencies":[{"path":"/Users/imac/Documents/GitHub/@prjdoc/docs/termandcond.md","mtime":1590250615554},{"path":"/Users/imac/Documents/GitHub/@prjdoc/node_modules/cache-loader/dist/cjs.js","mtime":1590251710302},{"path":"/Users/imac/Documents/GitHub/@prjdoc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1590251711067},{"path":"/Users/imac/Documents/GitHub/@prjdoc/node_modules/cache-loader/dist/cjs.js","mtime":1590251710302},{"path":"/Users/imac/Documents/GitHub/@prjdoc/node_modules/vue-loader/lib/index.js","mtime":1590251711067},{"path":"/Users/imac/Documents/GitHub/@prjdoc/node_modules/@vuepress/markdown-loader/index.js","mtime":1590251705237}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}