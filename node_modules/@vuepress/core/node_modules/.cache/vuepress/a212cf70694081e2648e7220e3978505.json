{"remainingRequest":"/Users/imac/Documents/GitHub/@prjdoc/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/imac/Documents/GitHub/@prjdoc/node_modules/vuepress-auth0/dist/authService.js","dependencies":[{"path":"/Users/imac/Documents/GitHub/@prjdoc/node_modules/vuepress-auth0/dist/authService.js","mtime":1590251724526},{"path":"/Users/imac/Documents/GitHub/@prjdoc/node_modules/cache-loader/dist/cjs.js","mtime":1590251710302},{"path":"/Users/imac/Documents/GitHub/@prjdoc/node_modules/babel-loader/lib/index.js","mtime":1590251708855}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS5ub3ciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5lbnRyaWVzIjsKaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tICJ0c2xpYiI7CmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gImV2ZW50cyI7CnZhciBsb2NhbFN0b3JhZ2VLZXkgPSAibG9nZ2VkSW4iOwp2YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB0cnVlIDogZmFsc2U7CnZhciBXZWJBdXRoOwoKaWYgKGlzQnJvd3NlcikgewogIFdlYkF1dGggPSByZXF1aXJlKCdhdXRoMC1qcycpLldlYkF1dGg7Cn0gZWxzZSB7CiAgV2ViQXV0aCA9IHt9Owp9Cgp2YXIgQXV0aFNlcnZpY2UgPSBmdW5jdGlvbiAoX3N1cGVyKSB7CiAgdHNsaWJfMS5fX2V4dGVuZHMoQXV0aFNlcnZpY2UsIF9zdXBlcik7CgogIGZ1bmN0aW9uIEF1dGhTZXJ2aWNlKG9wdGlvbnMsIHJvdXRlcikgewogICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpczsKCiAgICBfdGhpcy5hdXRoMCA9IG5ldyBXZWJBdXRoKHRzbGliXzEuX19hc3NpZ24oewogICAgICByZXNwb25zZVR5cGU6ICdpZF90b2tlbicsCiAgICAgIHNjb3BlOiAnb3BlbmlkIHByb2ZpbGUgZW1haWwnCiAgICB9LCBvcHRpb25zKSk7CiAgICBfdGhpcy5yb3V0ZXIgPSByb3V0ZXI7CiAgICBfdGhpcy5pZFRva2VuID0gdW5kZWZpbmVkOwogICAgX3RoaXMucHJvZmlsZSA9IHVuZGVmaW5lZDsKICAgIF90aGlzLmV4cGlyZXNJbiA9IDA7CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBBdXRoU2VydmljZS5wcm90b3R5cGUubG9naW4gPSBmdW5jdGlvbiAoY3VzdG9tU3RhdGUpIHsKICAgIGlmICghaXNCcm93c2VyIHx8IE9iamVjdC5lbnRyaWVzKHRoaXMuYXV0aDApLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmF1dGgwLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHRoaXMuYXV0aDAuYXV0aG9yaXplKHsKICAgICAgYXBwU3RhdGU6IGN1c3RvbVN0YXRlCiAgICB9KTsKICB9OwoKICBBdXRoU2VydmljZS5wcm90b3R5cGUubG9nT3V0ID0gZnVuY3Rpb24gKCkgewogICAgaWYgKCFpc0Jyb3dzZXIgfHwgT2JqZWN0LmVudHJpZXModGhpcy5hdXRoMCkubGVuZ3RoID09PSAwICYmIHRoaXMuYXV0aDAuY29uc3RydWN0b3IgPT09IE9iamVjdCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0obG9jYWxTdG9yYWdlS2V5KTsKICAgIHRoaXMuaWRUb2tlbiA9IHVuZGVmaW5lZDsKICAgIHRoaXMuZXhwaXJlc0luID0gMDsKICAgIHRoaXMucHJvZmlsZSA9IHVuZGVmaW5lZDsKICAgIHRoaXMuYXV0aDAubG9nb3V0KHsKICAgICAgcmV0dXJuVG86ICIiICsgd2luZG93LmxvY2F0aW9uLm9yaWdpbgogICAgfSk7CiAgfTsKCiAgQXV0aFNlcnZpY2UucHJvdG90eXBlLmhhbmRsZUF1dGhlbnRpY2F0aW9uID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHsKICAgICAgICBpZiAoIWlzQnJvd3NlciB8fCBPYmplY3QuZW50cmllcyh0aGlzLmF1dGgwKS5sZW5ndGggPT09IDAgJiYgdGhpcy5hdXRoMC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7CiAgICAgICAgICByZXR1cm4gWzIsICdlcnJvciddOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIFsyLCB0aGlzLmF1dGgwLnBhcnNlSGFzaChmdW5jdGlvbiAoZXJyLCBhdXRoUmVzdWx0KSB7CiAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgIHJldHVybiBlcnI7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoYXV0aFJlc3VsdCAhPT0gbnVsbCkgewogICAgICAgICAgICAgIF90aGlzLnNldFNlc3Npb24oYXV0aFJlc3VsdCk7CgogICAgICAgICAgICAgIGlmIChhdXRoUmVzdWx0LmlkVG9rZW4pIHsKICAgICAgICAgICAgICAgIHJldHVybiBhdXRoUmVzdWx0LmlkVG9rZW47CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSldOwogICAgICB9KTsKICAgIH0pOwogIH07CgogIEF1dGhTZXJ2aWNlLnByb3RvdHlwZS5pc0F1dGhlbnRpY2F0ZWQgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAoIWlzQnJvd3NlciB8fCBPYmplY3QuZW50cmllcyh0aGlzLmF1dGgwKS5sZW5ndGggPT09IDAgJiYgdGhpcy5hdXRoMC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBpZiAodGhpcy5leHBpcmVzSW4gJiYgRGF0ZS5ub3coKSA8IHRoaXMuZXhwaXJlc0luICYmIGxvY2FsU3RvcmFnZS5nZXRJdGVtKGxvY2FsU3RvcmFnZUtleSkgPT09ICJ0cnVlIikgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9OwoKICBBdXRoU2VydmljZS5wcm90b3R5cGUuaXNJZFRva2VuVmFsaWQgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAoIWlzQnJvd3NlciB8fCBPYmplY3QuZW50cmllcyh0aGlzLmF1dGgwKS5sZW5ndGggPT09IDAgJiYgdGhpcy5hdXRoMC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBpZiAodGhpcy5leHBpcmVzSW4gJiYgdGhpcy5pZFRva2VuICYmIERhdGUubm93KCkgPCB0aGlzLmV4cGlyZXNJbikgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9OwoKICBBdXRoU2VydmljZS5wcm90b3R5cGUuZ2V0SWRUb2tlbiA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHsKICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGlmICghKHRoaXMuaWRUb2tlbiAmJiB0aGlzLmlzSWRUb2tlblZhbGlkKCkpKSByZXR1cm4gWzMsIDFdOwogICAgICAgICAgICByZXR1cm4gWzIsIHRoaXMuaWRUb2tlbl07CgogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICBpZiAoIXRoaXMuaXNBdXRoZW50aWNhdGVkKCkpIHJldHVybiBbMywgM107CiAgICAgICAgICAgIHJldHVybiBbNCwgdGhpcy5yZW5ld1Rva2VucygpLnRoZW4oZnVuY3Rpb24gKGF1dGhSZXN1bHQpIHsKICAgICAgICAgICAgICByZXR1cm4gYXV0aFJlc3VsdC5pZFRva2VuOwogICAgICAgICAgICB9KV07CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICByZXR1cm4gWzIsIF9hLnNlbnQoKV07CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXR1cm4gWzIsICdlcnJvciBnZXR0aW5nIGlkVG9rZW4nXTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CiAgfTsKCiAgQXV0aFNlcnZpY2UucHJvdG90eXBlLnNldFNlc3Npb24gPSBmdW5jdGlvbiAoYXV0aFJlc3VsdCkgewogICAgaWYgKCFpc0Jyb3dzZXIgfHwgT2JqZWN0LmVudHJpZXModGhpcy5hdXRoMCkubGVuZ3RoID09PSAwICYmIHRoaXMuYXV0aDAuY29uc3RydWN0b3IgPT09IE9iamVjdCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgdGhpcy5pZFRva2VuID0gYXV0aFJlc3VsdC5pZFRva2VuOwogICAgdGhpcy5wcm9maWxlID0gYXV0aFJlc3VsdC5pZFRva2VuUGF5bG9hZDsKCiAgICBpZiAodGhpcy5wcm9maWxlICYmIHRoaXMucHJvZmlsZS5leHApIHsKICAgICAgdGhpcy5leHBpcmVzSW4gPSB0aGlzLnByb2ZpbGUuZXhwICogMTAwMCArIERhdGUubm93KCk7CiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGxvY2FsU3RvcmFnZUtleSwgInRydWUiKTsKICAgICAgdGhpcy5yb3V0ZXIucHVzaChhdXRoUmVzdWx0LmFwcFN0YXRlLnRhcmdldCk7CiAgICB9IGVsc2UgaWYgKGF1dGhSZXN1bHQuZXhwaXJlc0luKSB7CiAgICAgIHRoaXMuZXhwaXJlc0luID0gYXV0aFJlc3VsdC5leHBpcmVzSW4gKiAxMDAwICsgRGF0ZS5ub3coKTsKICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obG9jYWxTdG9yYWdlS2V5LCAidHJ1ZSIpOwogICAgICB0aGlzLnJvdXRlci5wdXNoKGF1dGhSZXN1bHQuYXBwU3RhdGUudGFyZ2V0KTsKICAgIH0gZWxzZSB7fQogIH07CgogIEF1dGhTZXJ2aWNlLnByb3RvdHlwZS5yZW5ld1Rva2VucyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7CiAgICAgICAgaWYgKCFpc0Jyb3dzZXIgfHwgT2JqZWN0LmVudHJpZXModGhpcy5hdXRoMCkubGVuZ3RoID09PSAwICYmIHRoaXMuYXV0aDAuY29uc3RydWN0b3IgPT09IE9iamVjdCkgewogICAgICAgICAgcmV0dXJuIFsyXTsKICAgICAgICB9CgogICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShsb2NhbFN0b3JhZ2VLZXkpICE9PSAidHJ1ZSIpIHsKICAgICAgICAgIHJldHVybiBbMiwgIk5vdCBsb2dnZWQgaW4iXTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBbMiwgdGhpcy5hdXRoMC5jaGVja1Nlc3Npb24oe30sIGZ1bmN0aW9uIChlcnIsIGF1dGhSZXN1bHQpIHsKICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgcmV0dXJuIGVycjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90aGlzLnNldFNlc3Npb24oYXV0aFJlc3VsdCk7CgogICAgICAgICAgICByZXR1cm4gYXV0aFJlc3VsdDsKICAgICAgICAgIH0KICAgICAgICB9KV07CiAgICAgIH0pOwogICAgfSk7CiAgfTsKCiAgcmV0dXJuIEF1dGhTZXJ2aWNlOwp9KEV2ZW50RW1pdHRlcik7CgpleHBvcnQgZGVmYXVsdCBBdXRoU2VydmljZTs="},null]}